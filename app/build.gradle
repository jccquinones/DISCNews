// Calculo del version code
def BUILD_DATE_TIME = new Date().format("yywwuHHmm").toInteger()

// Nombre del build
def BUILD_NAME = "J"

logger.lifecycle("Using buildDateTime: ${BUILD_DATE_TIME}")

apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.0"
    defaultConfig {
        applicationId "cl.ucn.disc.dam.discnews"
        minSdkVersion 21
        targetSdkVersion 26
        versionCode BUILD_DATE_TIME
        versionName "${BUILD_NAME}-${BUILD_DATE_TIME}"
        testInstrumentationRunner "android.suppgitort.test.runner.AndroidJUnitRunner"
    }
    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
    buildTypes {
        release {
            postprocessing {
                crunchPngs true
                removeUnusedCode true
                removeUnusedResources true
                obfuscate true
                optimizeCode true
                zipAlignEnabled true
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            }
            versionNameSuffix "-release"
        }
        debug {
            postprocessing {
                crunchPngs false
                removeUnusedCode false
                removeUnusedResources false
                obfuscate false
                optimizeCode false
                zipAlignEnabled false
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            }
            versionNameSuffix "-debug"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
    }
    lintOptions {
        abortOnError false
        // disale 'InlinedApi', 'AllowBackup'
        showAll true
        htmlReport true
    }
}

// File output name
android.applicationVariants.all { variant ->
    variant.outputs.all {
        outputFileName = "dnews-${variant.versionCode}-${variant.name}.apk"
    }
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Simple Logging Facade 4 Java
    implementation 'org.slf4j:slf4j-api:1.7.25'

    implementation 'com.android.support:appcompat-v7:26.1.0'

    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.assertj:assertj-core:3.8.0'

    testAnnotationProcessor 'org.projectlombok:lombok:1.16.18'
    testImplementation 'org.projectlombok:lombok:1.16.18'

    // Logback console core module
    testImplementation 'ch.qos.logback:logback-core:1.2.3'
    testImplementation 'ch.qos.logback:logback-classic:1.2.3'

    // Logback Android core module
    runtimeOnly 'com.github.tony19:logback-android-core:1.1.1-6'
    runtimeOnly('com.github.tony19:logback-android-classic:1.1.1-6') {
        // workaround issue #73
        exclude group: 'com.google.android', module: 'android'
    }

    // Commons Lang3
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'

    // Lombok Android
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.16.18'
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.16.18'

    // GSON to JSON converter
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.2'

    // Cliente http
    implementation 'com.squareup.okhttp3:okhttp:3.9.0'

}
